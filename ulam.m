function P = ulam(numbins, ptsperbin)

%%%computes ulam matrix on an equipartition of the unit interval with
%%%numbins bins and ptsperbin as the number of test points in each bin.
%%%choosing numbins=1000, ptsperbin=1000 takes a fraction of a second.
%%%result is a sparse row-stochastic matrix.


I = zeros(numbins * 4,1);
%%%the factor 4 above is a small overestimate of the average slope designed to
%%%preallocate the right amount of memory to speed up computation.
J = I;
V = I;
count = 0;
for i = 1 : numbins,
    x = (i - 1) / numbins + 1 / (ptsperbin * numbins * 2) : ...
        1 / (ptsperbin * numbins) : i / numbins - ...
        (1 / (ptsperbin * numbins * 2));

%%%if you wish to change the map, just alter the lines below.
%% random 3 metastable components / symmetric when eps=del
eps = 0.0;
del = 0.0;
%eps = 0.001; del = 0;
omega = 1;
t = 4.1;
%%% Map 1
x = 2 * (1 + 3 * del .* omega) .* x .* (x <= 1 / 6) ...
  + (1 / 3 + del .* omega - 2 .* (1 + 3 * del * omega) ...
  .* (x - 1 / 6) ) .* (1 / 6 < x) .* (x <= 1 / 3) ...
  + (4 / 9 + (2 + 9 * eps .* omega) .* (x - 1 / 3) ) ...
  .* (1 / 3 < x) .* (x  <= 4 / 9) ...
  + (1/2 - (3 + 18 * eps .* omega) .* (x - 1 / 2) ) ...
  .* (4 / 9 < x) .* (x  <= 5 / 9) ...
  + (1 / 3 - eps * omega + (2 + 9 * eps .* omega) ...
  .* (x - 5 / 9) ) .* (5 / 9 < x) .* (x < 2 / 3) ...
  + (1 - 2 * (1 + 3 * eps .* omega) .* (x - 2  /3) ) ...
  .* (2 / 3 <= x) .* (x  <= 5 / 6) ...
  + (1 + 2 * (1 + 3 * eps .* omega) .* (x - 1) ) ...
  .* (5 / 6 <= x) .* (x  <= 1);
%%% Map 2
% x = 4 * x .* (x < 1 / 8) ...
%     + (4 * x - 1 / 2) .* (1 / 8 <= x) .* (x < 1 / 4) ...
%     + (4 * x - 1) .* (1 / 4 <= x) .* (x < 1 / 2)...
%     + (4 * x - 2) .* (1 / 2 <= x) .* (x < 3 / 4)...
%     + (4 * - 5 / 2) .* (3 / 4 <= x) .* (x < 7 / 8)...
%     + (4 * x - 3) .* (7 / 8 <= x) .* (x <= 1);
%%% Map 3: Angle-doubling Map
% x = 2 * x .* (x < 1 / 2) ...
%     + (2 * x - 1) .* (1 / 2 <= x) .* (x < 1);
%%% Map 4: The Four-legs Map
% x = 2 * x .* (x < 1 / 4) ...
%     + t * (x - 1 / 4) .* (1 / 4 <= x) .* (x < 1 / 2) ...
%     + (t * (x - 3 / 4)) .* (1 / 2 <= x) .* (x < 3 / 4) ...
%     + (2 * (x - 1) + 1) .* (3 / 4 <= x) .* (x <= 1);
%%% Map 5: Five-component Map
% x = (2 * x) .* (0 <= x) .* (x < 1 / 10) ...
%     + (-2 * x + 2 / 5) .* (1 / 10 <= x) .* (x < 1 / 5) ...
%     + (3 * x / 2 ) .* (1 / 5 <= x) .* (x < 1 / 5 + 1 / 15) ...
%     + (-3 * x + 6 / 5) .* (1 / 5 + 1 / 15 <= x) .* (x < 1 / 5 + 2 / 15) ...
%     + (3 * x / 2 - 3 / 10) .* (1 / 5 + 2 / 15 <= x) .* (x < 2 / 5) ...
%     + (3 * x / 2 - 1 / 10) .* (2 / 5 <= x) .* (x < 2 / 5 + 1 / 15) ...
%     + (-3 * x / 2 + 2) .* (2 / 5 + 1 / 15 <= x) .* (x < 2 / 5 + 2 / 15) ...
%     + (3 * x / 2 - 2 / 5) .* (2 / 5 + 2 / 15 <= x) .* (x < 3 / 5) ...
%     + (3 * x / 2 - 1 / 5) .* (3 / 5 <= x) .* (x < 3 / 5 + 1 / 15) ...
%     + (-3 * x + 14 / 5) .* (3 / 5 + 1 / 15 <= x) .* (x < 3 / 5 + 2 / 15) ...
%     + (3 * x / 2 - 1 / 2) .* (3 / 5 + 2 / 15 <= x) .* (x < 4 / 5) ...
%     + (-2 * x + 13 / 5) .* (4 / 5 <= x) .* (x < 9 / 10) ...
%     + (2 * x - 1) .* (9 / 10 <= x) .* (x < 1);

    N = histc(x, 0 : 1 / numbins : 1);
    N = N(1 : end - 1);
    [K, L, Q] = find(N);
    for j = 1 : length(L),
        count = count + 1;
        I(count) = i;
        J(count) = L(j);
        V(count) = Q(j) / ptsperbin;
    end
end

I = I(find(I));
J = J(find(J));
V = V(find(V));
%P=sparse(I,J,V);
P = sparse(I, J, V, numbins, numbins);
    